name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests with Maven
      run: mvn clean test --batch-mode --fail-at-end
      
    - name: Display test results
      if: always()
      run: |
        echo "✅ Test execution completed!"
        if [ -d "target/surefire-reports" ]; then
          echo "📊 Test reports generated in target/surefire-reports/"
          echo "📁 Test report files:"
          find target/surefire-reports -name "*.xml" -exec basename {} \; 2>/dev/null || echo "No test report files found"
          echo "📈 Test summary:"
          find target/surefire-reports -name "*.txt" -exec cat {} \; 2>/dev/null || echo "No test summary found"
        fi
        
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile application
      run: mvn clean compile --batch-mode
      
    - name: Package application
      run: mvn package -DskipTests --batch-mode
      
    - name: List generated artifacts
      run: |
        echo "🏗️ Generated JAR files:"
        ls -la target/*.jar 2>/dev/null || echo "❌ No JAR files found"
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-jar
        path: target/*.jar
        retention-days: 5
        
  docker-build:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-jar
        path: target/
        
    - name: Verify downloaded artifacts
      run: |
        echo "📦 Downloaded artifacts:"
        ls -la target/ 2>/dev/null || echo "❌ No artifacts found"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -t simple-springboot-app:latest .
        echo "✅ Docker image built successfully!"
        
    - name: Verify Docker image
      run: |
        echo "🔍 Docker images:"
        docker images | grep simple-springboot-app || echo "❌ Image not found"
        
    - name: Save Docker image as artifact
      run: |
        echo "💾 Saving Docker image..."
        docker save simple-springboot-app:latest > simple-springboot-app.tar
        echo "✅ Docker image saved successfully!"
        ls -lh simple-springboot-app.tar
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: simple-springboot-app.tar
        retention-days: 5
